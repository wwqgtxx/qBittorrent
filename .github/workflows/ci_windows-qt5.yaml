name: CI - Windows -QT5

on: [push]

permissions:
  actions: write
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.head_ref != '' }}

jobs:
  ci:
    name: Build
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        libt_version: ["2.0.8", "1.2.18"]
        qt_version: ["5.15.2"]

    env:
      boost_path: "${{ github.workspace }}/../boost"
      libtorrent_path: "${{ github.workspace }}/libtorrent"
      qt_path: "${{ github.workspace }}/../Qt5_binaries"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools
        run: |
          choco install ninja

      # use the preinstalled vcpkg from image
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#package-management
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: C:/vcpkg
          doNotUpdateVcpkg: true  # the preinstalled vcpkg is updated regularly

      - name: Install dependencies from vcpkg
        run: |
          # tell vcpkg to only build Release variants of the dependencies
          New-Item `
            -Path "${{ github.workspace }}" `
            -Name "triplets_overlay" `
            -ItemType Directory
          Copy-Item `
            "${{ env.RUNVCPKG_VCPKG_ROOT }}/triplets/x64-windows-static.cmake" `
            "${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake"
          Add-Content `
            "${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake" `
            -Value "set(VCPKG_BUILD_TYPE release)"
          # clear buildtrees after each package installation to reduce disk space requirements
          $packages = `
            "openssl:x64-windows-static-release",
            "zlib:x64-windows-static-release"
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe upgrade `
            --overlay-triplets="${{ github.workspace }}/triplets_overlay" `
            --no-dry-run
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install `
            --overlay-triplets="${{ github.workspace }}/triplets_overlay" `
            --clean-after-build `
            $packages

      - name: Install boost
        run: |
          aria2c `
            "https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.7z" `
            -d "${{ runner.temp }}" `
            -o "boost.7z"
          7z x "${{ runner.temp }}/boost.7z" -o"${{ github.workspace }}/.."
          move "${{ github.workspace }}/../boost_*" "${{ env.boost_path }}"

      - name: Install jom
        run: |
          Invoke-WebRequest http://download.qt.io/official_releases/jom/jom.zip -OutFile .\jom.zip
          expand-archive -path "jom.zip"
          echo "${{ github.workspace }}\jom" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Static Qt
        run: |
          #aria2c `
          #  "https://github.com/wwqgtxx/static-build-qt5/releases/download/qt5_static_64/qt5_${{ matrix.qt_version }}_static_64.7z" `
          #  -d "${{ runner.temp }}" `
          #  -o "qt.7z"
          #7z x "${{ runner.temp }}/qt.7z" -o"${{ github.workspace }}/.."
          #
          # Clone Qt5 repo
          cd ..
          git clone https://code.qt.io/qt/qt5.git -b ${{ matrix.qt_version }}
          cd qt5
          perl init-repository -f --module-subset=qtbase,qtsvg,qttools,qtwinextras
          # Create shadow build folder
          cd ..
          mkdir qt5_shadow
          cd qt5_shadow
          # Setup the compiler
          cmd.exe /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
          # Configure Qt5
          ..\qt5\configure.bat -release -static -static-runtime -no-sql-db2 -no-sql-ibase -no-sql-mysql -no-sql-oci -no-sql-odbc -no-sql-psql -schannel -prefix "..\Qt5_binaries" -no-pch -optimize-size -opengl desktop -skip webengine -nomake tools -nomake tests -nomake examples -opensource -confirm-license
          jom -j4
          nmake install
          #
          dir "${{ env.qt_path }}"
          echo "Qt6_DIR=${{ env.qt_path }}" >> $env:GITHUB_ENV
          echo "QT_PLUGIN_PATH=${{ env.qt_path }}/plugins" >> $env:GITHUB_ENV
          echo "QML2_IMPORT_PATH=${{ env.qt_path }}/path" >> $env:GITHUB_ENV
          echo "${{ env.qt_path }}/bin" >> $env:GITHUB_PATH

      - name: Install libtorrent
        run: |
          git clone `
            --branch v${{ matrix.libt_version }} `
            --depth 1 `
            --recurse-submodules `
            https://github.com/arvidn/libtorrent.git
          cd libtorrent
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_FLAGS=/guard:cf `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_INSTALL_PREFIX="${{ env.libtorrent_path }}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}" `
            -DBUILD_SHARED_LIBS=OFF `
            -Ddeprecated-functions=OFF `
            -Dstatic_runtime=ON `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static-release
          cmake --build build
          cmake --install build

      - name: Build qBittorrent
        run: |
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_FLAGS="/WX" `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}" `
            -DLibtorrentRasterbar_DIR="${{ env.libtorrent_path }}/lib/cmake/LibtorrentRasterbar" `
            -DMSVC_RUNTIME_DYNAMIC=OFF `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static-release `
            -DVERBOSE_CONFIGURE=ON
          cmake --build build --target qbt_update_translations
          cmake --build build

      - name: Prepare build artifacts
        run: |
          mkdir upload
          copy build/qbittorrent.exe upload
          copy dist/windows/qt.conf upload
          7z a qBittorrent-CI_Windows-x64_libtorrent-${{ matrix.libt_version }}_qt-${{ matrix.qt_version }}.7z upload/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qBittorrent-CI_Windows-x64_libtorrent-${{ matrix.libt_version }}_qt-${{ matrix.qt_version }}
          path: upload

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag_name: qb_v4_5_5
          files: qBittorrent-CI_Windows-x64_libtorrent-${{ matrix.libt_version }}_qt-${{ matrix.qt_version }}.7z